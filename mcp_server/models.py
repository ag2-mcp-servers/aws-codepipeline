# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:13:02+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AWSRegionName(RootModel[constr(min_length=4, max_length=30)]):
    root: constr(min_length=4, max_length=30)


class AccessKeyId(RootModel[SecretStr]):
    root: SecretStr


class AccountId(RootModel[constr(pattern=r'[0-9]{12}')]):
    root: constr(pattern=r'[0-9]{12}')


class ActionCategory(Enum):
    Source = 'Source'
    Build = 'Build'
    Deploy = 'Deploy'
    Test = 'Test'
    Invoke = 'Invoke'
    Approval = 'Approval'


class ActionConfigurationKey(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class ActionConfigurationPropertyType(Enum):
    String = 'String'
    Number = 'Number'
    Boolean = 'Boolean'


class ActionConfigurationQueryableValue(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=50)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=50)


class ActionConfigurationValue(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class ActionExecutionId(RootModel[str]):
    root: str


class ActionExecutionStatus(Enum):
    InProgress = 'InProgress'
    Abandoned = 'Abandoned'
    Succeeded = 'Succeeded'
    Failed = 'Failed'


class ActionExecutionToken(RootModel[str]):
    root: str


class ActionName(
    RootModel[constr(pattern=r'[A-Za-z0-9.@\-_]+', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[A-Za-z0-9.@\-_]+', min_length=1, max_length=100)


class ActionNamespace(
    RootModel[constr(pattern=r'[A-Za-z0-9@\-_]+', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[A-Za-z0-9@\-_]+', min_length=1, max_length=100)


class ActionNotFoundException(RootModel[Any]):
    root: Any


class ActionOwner(Enum):
    AWS = 'AWS'
    ThirdParty = 'ThirdParty'
    Custom = 'Custom'


class ActionProvider(
    RootModel[constr(pattern=r'[0-9A-Za-z_-]+', min_length=1, max_length=35)]
):
    root: constr(pattern=r'[0-9A-Za-z_-]+', min_length=1, max_length=35)


class ActionRunOrder(RootModel[conint(ge=1, le=999)]):
    root: conint(ge=1, le=999)


class ActionTypeDescription(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ActionTypeNotFoundException(RootModel[Any]):
    root: Any


class ActionTypeOwner(RootModel[constr(pattern=r'AWS|ThirdParty')]):
    root: constr(pattern=r'AWS|ThirdParty')


class AllowedAccount(RootModel[constr(pattern=r'[0-9]{12}|\*')]):
    root: constr(pattern=r'[0-9]{12}|\*')


class AllowedAccounts(RootModel[List[AllowedAccount]]):
    root: List[AllowedAccount] = Field(..., max_length=1000, min_length=1)


class ApprovalAlreadyCompletedException(RootModel[Any]):
    root: Any


class ApprovalStatus(Enum):
    Approved = 'Approved'
    Rejected = 'Rejected'


class ApprovalSummary(RootModel[constr(min_length=0, max_length=512)]):
    root: constr(min_length=0, max_length=512)


class ApprovalToken(
    RootModel[
        constr(pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')
    ]
):
    root: constr(
        pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    )


class ArtifactLocationType(Enum):
    S3 = 'S3'


class ArtifactName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_\-]+', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[a-zA-Z0-9_\-]+', min_length=1, max_length=100)


class ArtifactStoreLocation(
    RootModel[constr(pattern=r'[a-zA-Z0-9\-\.]+', min_length=3, max_length=63)]
):
    root: constr(pattern=r'[a-zA-Z0-9\-\.]+', min_length=3, max_length=63)


class ArtifactStoreType(Enum):
    S3 = 'S3'


class BlockerName(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class BlockerType(Enum):
    Schedule = 'Schedule'


class Boolean(RootModel[bool]):
    root: bool


class ClientId(
    RootModel[
        constr(pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')
    ]
):
    root: constr(
        pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    )


class ClientRequestToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=128)


class ClientToken(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class Code(RootModel[str]):
    root: str


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConflictException(RootModel[Any]):
    root: Any


class ContinuationToken(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class DeleteWebhookOutput(BaseModel):
    pass


class DeregisterWebhookWithThirdPartyOutput(BaseModel):
    pass


class Description(RootModel[constr(min_length=1, max_length=160)]):
    root: constr(min_length=1, max_length=160)


class DisabledReason(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9!@ \(\)\.\*\?\-]+', min_length=1, max_length=300)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9!@ \(\)\.\*\?\-]+', min_length=1, max_length=300)


class DuplicatedStopRequestException(RootModel[Any]):
    root: Any


class Enabled(RootModel[bool]):
    root: bool


class EncryptionKeyId(RootModel[constr(min_length=1, max_length=400)]):
    root: constr(min_length=1, max_length=400)


class EncryptionKeyType(Enum):
    KMS = 'KMS'


class ExecutionId(RootModel[constr(min_length=1, max_length=1500)]):
    root: constr(min_length=1, max_length=1500)


class ExecutionSummary(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ExecutorType(Enum):
    JobWorker = 'JobWorker'
    Lambda = 'Lambda'


class ExternalExecutionId(RootModel[str]):
    root: str


class ExternalExecutionSummary(RootModel[str]):
    root: str


class FailureType(Enum):
    JobFailed = 'JobFailed'
    ConfigurationError = 'ConfigurationError'
    PermissionError = 'PermissionError'
    RevisionOutOfSync = 'RevisionOutOfSync'
    RevisionUnavailable = 'RevisionUnavailable'
    SystemUnavailable = 'SystemUnavailable'


class InputArtifact(BaseModel):
    name: ArtifactName


class InputArtifactList(RootModel[List[InputArtifact]]):
    root: List[InputArtifact]


class InvalidActionDeclarationException(RootModel[Any]):
    root: Any


class InvalidApprovalTokenException(RootModel[Any]):
    root: Any


class InvalidArnException(RootModel[Any]):
    root: Any


class InvalidBlockerDeclarationException(RootModel[Any]):
    root: Any


class InvalidClientTokenException(RootModel[Any]):
    root: Any


class InvalidJobException(RootModel[Any]):
    root: Any


class InvalidJobStateException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class InvalidNonceException(RootModel[Any]):
    root: Any


class InvalidStageDeclarationException(RootModel[Any]):
    root: Any


class InvalidStructureException(RootModel[Any]):
    root: Any


class InvalidTagsException(RootModel[Any]):
    root: Any


class InvalidWebhookAuthenticationParametersException(RootModel[Any]):
    root: Any


class InvalidWebhookFilterPatternException(RootModel[Any]):
    root: Any


class JobId(
    RootModel[
        constr(pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')
    ]
):
    root: constr(
        pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    )


class JobNotFoundException(RootModel[Any]):
    root: Any


class JobStatus(Enum):
    Created = 'Created'
    Queued = 'Queued'
    Dispatched = 'Dispatched'
    InProgress = 'InProgress'
    TimedOut = 'TimedOut'
    Succeeded = 'Succeeded'
    Failed = 'Failed'


class JobTimeout(RootModel[conint(ge=60, le=43200)]):
    root: conint(ge=60, le=43200)


class JsonPath(RootModel[constr(min_length=1, max_length=150)]):
    root: constr(min_length=1, max_length=150)


class LambdaFunctionArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[\w]+)*:lambda:.+:[0-9]{12}:function:.+',
            min_length=1,
            max_length=140,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[\w]+)*:lambda:.+:[0-9]{12}:function:.+',
        min_length=1,
        max_length=140,
    )


class LastChangedAt(RootModel[datetime]):
    root: datetime


class LastChangedBy(RootModel[str]):
    root: str


class LastUpdatedBy(RootModel[str]):
    root: str


class LimitExceededException(RootModel[Any]):
    root: Any


class MatchEquals(RootModel[constr(min_length=1, max_length=150)]):
    root: constr(min_length=1, max_length=150)


class MaxBatchSize(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxPipelines(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaximumActionTypeArtifactCount(RootModel[conint(ge=0, le=10)]):
    root: conint(ge=0, le=10)


class MaximumArtifactCount(RootModel[conint(ge=0, le=5)]):
    root: conint(ge=0, le=5)


class Message(RootModel[constr(min_length=1, max_length=5000)]):
    root: constr(min_length=1, max_length=5000)


class MinimumActionTypeArtifactCount(RootModel[conint(ge=0, le=10)]):
    root: conint(ge=0, le=10)


class MinimumArtifactCount(RootModel[conint(ge=0, le=5)]):
    root: conint(ge=0, le=5)


class NextToken(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class Nonce(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class NotLatestPipelineExecutionException(RootModel[Any]):
    root: Any


class OutputArtifact(BaseModel):
    name: ArtifactName


class OutputArtifactList(RootModel[List[OutputArtifact]]):
    root: List[OutputArtifact]


class OutputVariablesKey(RootModel[constr(pattern=r'[A-Za-z0-9@\-_]+')]):
    root: constr(pattern=r'[A-Za-z0-9@\-_]+')


class OutputVariablesSizeExceededException(RootModel[Any]):
    root: Any


class OutputVariablesValue(RootModel[str]):
    root: str


class Percentage(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class PipelineArn(
    RootModel[constr(pattern=r'arn:aws(-[\w]+)*:codepipeline:.+:[0-9]{12}:.+')]
):
    root: constr(pattern=r'arn:aws(-[\w]+)*:codepipeline:.+:[0-9]{12}:.+')


class PipelineExecutionId(
    RootModel[
        constr(pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')
    ]
):
    root: constr(
        pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    )


class PipelineExecutionNotFoundException(RootModel[Any]):
    root: Any


class PipelineExecutionNotStoppableException(RootModel[Any]):
    root: Any


class PipelineExecutionStatus(Enum):
    Cancelled = 'Cancelled'
    InProgress = 'InProgress'
    Stopped = 'Stopped'
    Stopping = 'Stopping'
    Succeeded = 'Succeeded'
    Superseded = 'Superseded'
    Failed = 'Failed'


class PipelineExecutionStatusSummary(RootModel[str]):
    root: str


class PipelineName(
    RootModel[constr(pattern=r'[A-Za-z0-9.@\-_]+', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[A-Za-z0-9.@\-_]+', min_length=1, max_length=100)


class PipelineNameInUseException(RootModel[Any]):
    root: Any


class PipelineNotFoundException(RootModel[Any]):
    root: Any


class PipelineVersion(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PipelineVersionNotFoundException(RootModel[Any]):
    root: Any


class PolicyStatementsTemplate(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class PollingAccountList(RootModel[List[AccountId]]):
    root: List[AccountId] = Field(..., max_length=1000, min_length=1)


class PropertyDescription(RootModel[constr(min_length=1, max_length=250)]):
    root: constr(min_length=1, max_length=250)


class PutActionRevisionOutput(BaseModel):
    newRevision: Optional[Boolean] = None
    pipelineExecutionId: Optional[PipelineExecutionId] = None


class QueryParamMap(RootModel[Optional[Dict[str, ActionConfigurationQueryableValue]]]):
    root: Optional[Dict[str, ActionConfigurationQueryableValue]] = None


class RegisterWebhookWithThirdPartyOutput(BaseModel):
    pass


class RequestFailedException(RootModel[Any]):
    root: Any


class ResourceArn(
    RootModel[constr(pattern=r'arn:aws(-[\w]+)*:codepipeline:.+:[0-9]{12}:.+')]
):
    root: constr(pattern=r'arn:aws(-[\w]+)*:codepipeline:.+:[0-9]{12}:.+')


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RetryStageExecutionOutput(BaseModel):
    pipelineExecutionId: Optional[PipelineExecutionId] = None


class Revision(RootModel[constr(min_length=1, max_length=1500)]):
    root: constr(min_length=1, max_length=1500)


class RevisionChangeIdentifier(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class RevisionSummary(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class RoleArn(
    RootModel[
        constr(pattern=r'arn:aws(-[\w]+)*:iam::[0-9]{12}:role/.*', max_length=1024)
    ]
):
    root: constr(pattern=r'arn:aws(-[\w]+)*:iam::[0-9]{12}:role/.*', max_length=1024)


class S3Bucket(RootModel[constr(min_length=3, max_length=63)]):
    root: constr(min_length=3, max_length=63)


class S3BucketName(RootModel[str]):
    root: str


class S3Key(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class S3Location(BaseModel):
    bucket: Optional[S3Bucket] = None
    key: Optional[S3Key] = None


class S3ObjectKey(RootModel[str]):
    root: str


class SecretAccessKey(RootModel[SecretStr]):
    root: SecretStr


class ServicePrincipal(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class SessionToken(RootModel[SecretStr]):
    root: SecretStr


class StageExecutionStatus(Enum):
    Cancelled = 'Cancelled'
    InProgress = 'InProgress'
    Failed = 'Failed'
    Stopped = 'Stopped'
    Stopping = 'Stopping'
    Succeeded = 'Succeeded'


class StageName(
    RootModel[constr(pattern=r'[A-Za-z0-9.@\-_]+', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[A-Za-z0-9.@\-_]+', min_length=1, max_length=100)


class StageNotFoundException(RootModel[Any]):
    root: Any


class StageNotRetryableException(RootModel[Any]):
    root: Any


class StageRetryMode(Enum):
    FAILED_ACTIONS = 'FAILED_ACTIONS'


class StageTransitionType(Enum):
    Inbound = 'Inbound'
    Outbound = 'Outbound'


class StartPipelineExecutionInput(BaseModel):
    clientRequestToken: Optional[ClientRequestToken] = None
    name: PipelineName


class StartPipelineExecutionOutput(BaseModel):
    pipelineExecutionId: Optional[PipelineExecutionId] = None


class StopPipelineExecutionOutput(BaseModel):
    pipelineExecutionId: Optional[PipelineExecutionId] = None


class StopPipelineExecutionReason(RootModel[constr(max_length=200)]):
    root: constr(max_length=200)


class String(RootModel[str]):
    root: str


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceOutput(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class ThirdPartyJob(BaseModel):
    clientId: Optional[ClientId] = None
    jobId: Optional[JobId] = None


class ThirdPartyJobId(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ThirdPartyJobList(RootModel[List[ThirdPartyJob]]):
    root: List[ThirdPartyJob]


class Time(RootModel[datetime]):
    root: datetime


class Timestamp(RootModel[datetime]):
    root: datetime


class TooManyTagsException(RootModel[Any]):
    root: Any


class TransitionState(BaseModel):
    disabledReason: Optional[DisabledReason] = None
    enabled: Optional[Enabled] = None
    lastChangedAt: Optional[LastChangedAt] = None
    lastChangedBy: Optional[LastChangedBy] = None


class TriggerDetail(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class TriggerType(Enum):
    CreatePipeline = 'CreatePipeline'
    StartPipelineExecution = 'StartPipelineExecution'
    PollForSourceChanges = 'PollForSourceChanges'
    Webhook = 'Webhook'
    CloudWatchEvent = 'CloudWatchEvent'
    PutActionRevision = 'PutActionRevision'


class UntagResourceInput(BaseModel):
    resourceArn: ResourceArn
    tagKeys: TagKeyList


class UntagResourceOutput(BaseModel):
    pass


class Url(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class UrlTemplate(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ValidationException(RootModel[Any]):
    root: Any


class Version(RootModel[constr(pattern=r'[0-9A-Za-z_-]+', min_length=1, max_length=9)]):
    root: constr(pattern=r'[0-9A-Za-z_-]+', min_length=1, max_length=9)


class WebhookArn(RootModel[str]):
    root: str


class WebhookAuthConfigurationAllowedIPRange(
    RootModel[constr(min_length=1, max_length=100)]
):
    root: constr(min_length=1, max_length=100)


class WebhookAuthConfigurationSecretToken(
    RootModel[constr(min_length=1, max_length=100)]
):
    root: constr(min_length=1, max_length=100)


class WebhookAuthenticationType(Enum):
    GITHUB_HMAC = 'GITHUB_HMAC'
    IP = 'IP'
    UNAUTHENTICATED = 'UNAUTHENTICATED'


class WebhookErrorCode(RootModel[str]):
    root: str


class WebhookErrorMessage(RootModel[str]):
    root: str


class WebhookFilterRule(BaseModel):
    jsonPath: JsonPath
    matchEquals: Optional[MatchEquals] = None


class WebhookFilters(RootModel[List[WebhookFilterRule]]):
    root: List[WebhookFilterRule] = Field(..., max_length=5)


class WebhookLastTriggered(RootModel[datetime]):
    root: datetime


class WebhookName(
    RootModel[constr(pattern=r'[A-Za-z0-9.@\-_]+', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[A-Za-z0-9.@\-_]+', min_length=1, max_length=100)


class WebhookNotFoundException(RootModel[Any]):
    root: Any


class WebhookUrl(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class XAmzTarget(Enum):
    CodePipeline_20150709_AcknowledgeJob = 'CodePipeline_20150709.AcknowledgeJob'


class XAmzTarget1(Enum):
    CodePipeline_20150709_AcknowledgeThirdPartyJob = (
        'CodePipeline_20150709.AcknowledgeThirdPartyJob'
    )


class XAmzTarget2(Enum):
    CodePipeline_20150709_CreateCustomActionType = (
        'CodePipeline_20150709.CreateCustomActionType'
    )


class XAmzTarget3(Enum):
    CodePipeline_20150709_CreatePipeline = 'CodePipeline_20150709.CreatePipeline'


class XAmzTarget4(Enum):
    CodePipeline_20150709_DeleteCustomActionType = (
        'CodePipeline_20150709.DeleteCustomActionType'
    )


class XAmzTarget5(Enum):
    CodePipeline_20150709_DeletePipeline = 'CodePipeline_20150709.DeletePipeline'


class XAmzTarget6(Enum):
    CodePipeline_20150709_DeleteWebhook = 'CodePipeline_20150709.DeleteWebhook'


class XAmzTarget7(Enum):
    CodePipeline_20150709_DeregisterWebhookWithThirdParty = (
        'CodePipeline_20150709.DeregisterWebhookWithThirdParty'
    )


class XAmzTarget8(Enum):
    CodePipeline_20150709_DisableStageTransition = (
        'CodePipeline_20150709.DisableStageTransition'
    )


class XAmzTarget9(Enum):
    CodePipeline_20150709_EnableStageTransition = (
        'CodePipeline_20150709.EnableStageTransition'
    )


class XAmzTarget10(Enum):
    CodePipeline_20150709_GetActionType = 'CodePipeline_20150709.GetActionType'


class XAmzTarget11(Enum):
    CodePipeline_20150709_GetJobDetails = 'CodePipeline_20150709.GetJobDetails'


class XAmzTarget12(Enum):
    CodePipeline_20150709_GetPipeline = 'CodePipeline_20150709.GetPipeline'


class XAmzTarget13(Enum):
    CodePipeline_20150709_GetPipelineExecution = (
        'CodePipeline_20150709.GetPipelineExecution'
    )


class XAmzTarget14(Enum):
    CodePipeline_20150709_GetPipelineState = 'CodePipeline_20150709.GetPipelineState'


class XAmzTarget15(Enum):
    CodePipeline_20150709_GetThirdPartyJobDetails = (
        'CodePipeline_20150709.GetThirdPartyJobDetails'
    )


class XAmzTarget16(Enum):
    CodePipeline_20150709_ListActionExecutions = (
        'CodePipeline_20150709.ListActionExecutions'
    )


class XAmzTarget17(Enum):
    CodePipeline_20150709_ListActionTypes = 'CodePipeline_20150709.ListActionTypes'


class XAmzTarget18(Enum):
    CodePipeline_20150709_ListPipelineExecutions = (
        'CodePipeline_20150709.ListPipelineExecutions'
    )


class XAmzTarget19(Enum):
    CodePipeline_20150709_ListPipelines = 'CodePipeline_20150709.ListPipelines'


class XAmzTarget20(Enum):
    CodePipeline_20150709_ListTagsForResource = (
        'CodePipeline_20150709.ListTagsForResource'
    )


class XAmzTarget21(Enum):
    CodePipeline_20150709_ListWebhooks = 'CodePipeline_20150709.ListWebhooks'


class XAmzTarget22(Enum):
    CodePipeline_20150709_PollForJobs = 'CodePipeline_20150709.PollForJobs'


class XAmzTarget23(Enum):
    CodePipeline_20150709_PollForThirdPartyJobs = (
        'CodePipeline_20150709.PollForThirdPartyJobs'
    )


class XAmzTarget24(Enum):
    CodePipeline_20150709_PutActionRevision = 'CodePipeline_20150709.PutActionRevision'


class XAmzTarget25(Enum):
    CodePipeline_20150709_PutApprovalResult = 'CodePipeline_20150709.PutApprovalResult'


class XAmzTarget26(Enum):
    CodePipeline_20150709_PutJobFailureResult = (
        'CodePipeline_20150709.PutJobFailureResult'
    )


class XAmzTarget27(Enum):
    CodePipeline_20150709_PutJobSuccessResult = (
        'CodePipeline_20150709.PutJobSuccessResult'
    )


class XAmzTarget28(Enum):
    CodePipeline_20150709_PutThirdPartyJobFailureResult = (
        'CodePipeline_20150709.PutThirdPartyJobFailureResult'
    )


class XAmzTarget29(Enum):
    CodePipeline_20150709_PutThirdPartyJobSuccessResult = (
        'CodePipeline_20150709.PutThirdPartyJobSuccessResult'
    )


class XAmzTarget30(Enum):
    CodePipeline_20150709_PutWebhook = 'CodePipeline_20150709.PutWebhook'


class XAmzTarget31(Enum):
    CodePipeline_20150709_RegisterWebhookWithThirdParty = (
        'CodePipeline_20150709.RegisterWebhookWithThirdParty'
    )


class XAmzTarget32(Enum):
    CodePipeline_20150709_RetryStageExecution = (
        'CodePipeline_20150709.RetryStageExecution'
    )


class XAmzTarget33(Enum):
    CodePipeline_20150709_StartPipelineExecution = (
        'CodePipeline_20150709.StartPipelineExecution'
    )


class XAmzTarget34(Enum):
    CodePipeline_20150709_StopPipelineExecution = (
        'CodePipeline_20150709.StopPipelineExecution'
    )


class XAmzTarget35(Enum):
    CodePipeline_20150709_TagResource = 'CodePipeline_20150709.TagResource'


class XAmzTarget36(Enum):
    CodePipeline_20150709_UntagResource = 'CodePipeline_20150709.UntagResource'


class XAmzTarget37(Enum):
    CodePipeline_20150709_UpdateActionType = 'CodePipeline_20150709.UpdateActionType'


class XAmzTarget38(Enum):
    CodePipeline_20150709_UpdatePipeline = 'CodePipeline_20150709.UpdatePipeline'


class AWSSessionCredentials(BaseModel):
    accessKeyId: AccessKeyId
    secretAccessKey: SecretAccessKey
    sessionToken: SessionToken


class AcknowledgeJobInput(BaseModel):
    jobId: JobId
    nonce: Nonce


class AcknowledgeJobOutput(BaseModel):
    status: Optional[JobStatus] = None


class AcknowledgeThirdPartyJobInput(BaseModel):
    clientToken: ClientToken
    jobId: ThirdPartyJobId
    nonce: Nonce


class AcknowledgeThirdPartyJobOutput(BaseModel):
    status: Optional[JobStatus] = None


class ActionConfigurationMap(RootModel[Optional[Dict[str, ActionConfigurationValue]]]):
    root: Optional[Dict[str, ActionConfigurationValue]] = None


class ActionConfigurationProperty(BaseModel):
    description: Optional[Description] = None
    key: Boolean
    name: ActionConfigurationKey
    queryable: Optional[Boolean] = None
    required: Boolean
    secret: Boolean
    type: Optional[ActionConfigurationPropertyType] = None


class ActionConfigurationPropertyList(RootModel[List[ActionConfigurationProperty]]):
    root: List[ActionConfigurationProperty] = Field(..., max_length=10)


class ActionContext(BaseModel):
    actionExecutionId: Optional[ActionExecutionId] = None
    name: Optional[ActionName] = None


class ActionExecutionFilter(BaseModel):
    pipelineExecutionId: Optional[PipelineExecutionId] = None


class ActionExecutionResult(BaseModel):
    externalExecutionId: Optional[ExternalExecutionId] = None
    externalExecutionSummary: Optional[ExternalExecutionSummary] = None
    externalExecutionUrl: Optional[Url] = None


class ActionRevision(BaseModel):
    created: Timestamp
    revisionChangeId: RevisionChangeIdentifier
    revisionId: Revision


class ActionTypeArtifactDetails(BaseModel):
    maximumCount: MaximumActionTypeArtifactCount
    minimumCount: MinimumActionTypeArtifactCount


class ActionTypeId(BaseModel):
    category: ActionCategory
    owner: ActionOwner
    provider: ActionProvider
    version: Version


class ActionTypeIdentifier(BaseModel):
    category: ActionCategory
    owner: ActionTypeOwner
    provider: ActionProvider
    version: Version


class ActionTypePermissions(BaseModel):
    allowedAccounts: AllowedAccounts


class ActionTypeProperty(BaseModel):
    description: Optional[PropertyDescription] = None
    key: Boolean
    name: ActionConfigurationKey
    noEcho: Boolean
    optional: Boolean
    queryable: Optional[Boolean] = None


class ActionTypeSettings(BaseModel):
    entityUrlTemplate: Optional[UrlTemplate] = None
    executionUrlTemplate: Optional[UrlTemplate] = None
    revisionUrlTemplate: Optional[UrlTemplate] = None
    thirdPartyConfigurationUrl: Optional[Url] = None


class ActionTypeUrls(BaseModel):
    configurationUrl: Optional[Url] = None
    entityUrlTemplate: Optional[UrlTemplate] = None
    executionUrlTemplate: Optional[UrlTemplate] = None
    revisionUrlTemplate: Optional[UrlTemplate] = None


class ApprovalResult(BaseModel):
    status: ApprovalStatus
    summary: ApprovalSummary


class ArtifactDetail(BaseModel):
    name: Optional[ArtifactName] = None
    s3location: Optional[S3Location] = None


class ArtifactDetailList(RootModel[List[ArtifactDetail]]):
    root: List[ArtifactDetail]


class ArtifactDetails(BaseModel):
    maximumCount: MaximumArtifactCount
    minimumCount: MinimumArtifactCount


class ArtifactRevision(BaseModel):
    created: Optional[Timestamp] = None
    name: Optional[ArtifactName] = None
    revisionChangeIdentifier: Optional[RevisionChangeIdentifier] = None
    revisionId: Optional[Revision] = None
    revisionSummary: Optional[RevisionSummary] = None
    revisionUrl: Optional[Url] = None


class ArtifactRevisionList(RootModel[List[ArtifactRevision]]):
    root: List[ArtifactRevision]


class BlockerDeclaration(BaseModel):
    name: BlockerName
    type: BlockerType


class CurrentRevision(BaseModel):
    changeIdentifier: RevisionChangeIdentifier
    created: Optional[Time] = None
    revision: Revision
    revisionSummary: Optional[RevisionSummary] = None


class DeleteCustomActionTypeInput(BaseModel):
    category: ActionCategory
    provider: ActionProvider
    version: Version


class DeletePipelineInput(BaseModel):
    name: PipelineName


class DeleteWebhookInput(BaseModel):
    name: WebhookName


class DeregisterWebhookWithThirdPartyInput(BaseModel):
    webhookName: Optional[WebhookName] = None


class DisableStageTransitionInput(BaseModel):
    pipelineName: PipelineName
    reason: DisabledReason
    stageName: StageName
    transitionType: StageTransitionType


class EnableStageTransitionInput(BaseModel):
    pipelineName: PipelineName
    stageName: StageName
    transitionType: StageTransitionType


class EncryptionKey(BaseModel):
    id: EncryptionKeyId
    type: EncryptionKeyType


class ErrorDetails(BaseModel):
    code: Optional[Code] = None
    message: Optional[Message] = None


class ExecutionDetails(BaseModel):
    externalExecutionId: Optional[ExecutionId] = None
    percentComplete: Optional[Percentage] = None
    summary: Optional[ExecutionSummary] = None


class ExecutionTrigger(BaseModel):
    triggerDetail: Optional[TriggerDetail] = None
    triggerType: Optional[TriggerType] = None


class FailureDetails(BaseModel):
    externalExecutionId: Optional[ExecutionId] = None
    message: Message
    type: FailureType


class GetActionTypeInput(BaseModel):
    category: ActionCategory
    owner: ActionTypeOwner
    provider: ActionProvider
    version: Version


class GetJobDetailsInput(BaseModel):
    jobId: JobId


class GetPipelineExecutionInput(BaseModel):
    pipelineExecutionId: PipelineExecutionId
    pipelineName: PipelineName


class GetPipelineInput(BaseModel):
    name: PipelineName
    version: Optional[PipelineVersion] = None


class GetPipelineStateInput(BaseModel):
    name: PipelineName


class GetThirdPartyJobDetailsInput(BaseModel):
    clientToken: ClientToken
    jobId: ThirdPartyJobId


class LambdaExecutorConfiguration(BaseModel):
    lambdaFunctionArn: LambdaFunctionArn


class ListActionExecutionsInput(BaseModel):
    filter: Optional[ActionExecutionFilter] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    pipelineName: PipelineName


class ListActionTypesInput(BaseModel):
    actionOwnerFilter: Optional[ActionOwner] = None
    nextToken: Optional[NextToken] = None
    regionFilter: Optional[AWSRegionName] = None


class ListPipelineExecutionsInput(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    pipelineName: PipelineName


class ListPipelinesInput(BaseModel):
    maxResults: Optional[MaxPipelines] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceInput(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    resourceArn: ResourceArn


class ListWebhooksInput(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class OutputVariablesMap(RootModel[Optional[Dict[str, OutputVariablesValue]]]):
    root: Optional[Dict[str, OutputVariablesValue]] = None


class PipelineExecution(BaseModel):
    artifactRevisions: Optional[ArtifactRevisionList] = None
    pipelineExecutionId: Optional[PipelineExecutionId] = None
    pipelineName: Optional[PipelineName] = None
    pipelineVersion: Optional[PipelineVersion] = None
    status: Optional[PipelineExecutionStatus] = None
    statusSummary: Optional[PipelineExecutionStatusSummary] = None


class PipelineMetadata(BaseModel):
    created: Optional[Timestamp] = None
    pipelineArn: Optional[PipelineArn] = None
    updated: Optional[Timestamp] = None


class PipelineSummary(BaseModel):
    created: Optional[Timestamp] = None
    name: Optional[PipelineName] = None
    updated: Optional[Timestamp] = None
    version: Optional[PipelineVersion] = None


class PollForJobsInput(BaseModel):
    actionTypeId: ActionTypeId
    maxBatchSize: Optional[MaxBatchSize] = None
    queryParam: Optional[QueryParamMap] = None


class PollForThirdPartyJobsInput(BaseModel):
    actionTypeId: ActionTypeId
    maxBatchSize: Optional[MaxBatchSize] = None


class PollForThirdPartyJobsOutput(BaseModel):
    jobs: Optional[ThirdPartyJobList] = None


class PollingServicePrincipalList(RootModel[List[ServicePrincipal]]):
    root: List[ServicePrincipal] = Field(..., max_length=10, min_length=1)


class PutActionRevisionInput(BaseModel):
    actionName: ActionName
    actionRevision: ActionRevision
    pipelineName: PipelineName
    stageName: StageName


class PutApprovalResultInput(BaseModel):
    actionName: ActionName
    pipelineName: PipelineName
    result: ApprovalResult
    stageName: StageName
    token: ApprovalToken


class PutApprovalResultOutput(BaseModel):
    approvedAt: Optional[Timestamp] = None


class PutJobFailureResultInput(BaseModel):
    failureDetails: FailureDetails
    jobId: JobId


class PutJobSuccessResultInput(BaseModel):
    continuationToken: Optional[ContinuationToken] = None
    currentRevision: Optional[CurrentRevision] = None
    executionDetails: Optional[ExecutionDetails] = None
    jobId: JobId
    outputVariables: Optional[OutputVariablesMap] = None


class PutThirdPartyJobFailureResultInput(BaseModel):
    clientToken: ClientToken
    failureDetails: FailureDetails
    jobId: ThirdPartyJobId


class PutThirdPartyJobSuccessResultInput(BaseModel):
    clientToken: ClientToken
    continuationToken: Optional[ContinuationToken] = None
    currentRevision: Optional[CurrentRevision] = None
    executionDetails: Optional[ExecutionDetails] = None
    jobId: ThirdPartyJobId


class RegisterWebhookWithThirdPartyInput(BaseModel):
    webhookName: Optional[WebhookName] = None


class ResolvedActionConfigurationMap(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class RetryStageExecutionInput(BaseModel):
    pipelineExecutionId: PipelineExecutionId
    pipelineName: PipelineName
    retryMode: StageRetryMode
    stageName: StageName


class S3ArtifactLocation(BaseModel):
    bucketName: S3BucketName
    objectKey: S3ObjectKey


class SourceRevision(BaseModel):
    actionName: ActionName
    revisionId: Optional[Revision] = None
    revisionSummary: Optional[RevisionSummary] = None
    revisionUrl: Optional[Url] = None


class SourceRevisionList(RootModel[List[SourceRevision]]):
    root: List[SourceRevision]


class StageBlockerDeclarationList(RootModel[List[BlockerDeclaration]]):
    root: List[BlockerDeclaration]


class StageContext(BaseModel):
    name: Optional[StageName] = None


class StageExecution(BaseModel):
    pipelineExecutionId: PipelineExecutionId
    status: StageExecutionStatus


class StopExecutionTrigger(BaseModel):
    reason: Optional[StopPipelineExecutionReason] = None


class StopPipelineExecutionInput(BaseModel):
    abandon: Optional[Boolean] = None
    pipelineExecutionId: PipelineExecutionId
    pipelineName: PipelineName
    reason: Optional[StopPipelineExecutionReason] = None


class Tag(BaseModel):
    key: TagKey
    value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceInput(BaseModel):
    resourceArn: ResourceArn
    tags: TagList


class WebhookAuthConfiguration(BaseModel):
    AllowedIPRange: Optional[WebhookAuthConfigurationAllowedIPRange] = None
    SecretToken: Optional[WebhookAuthConfigurationSecretToken] = None


class WebhookDefinition(BaseModel):
    authentication: WebhookAuthenticationType
    authenticationConfiguration: WebhookAuthConfiguration
    filters: WebhookFilters
    name: WebhookName
    targetAction: ActionName
    targetPipeline: PipelineName


class ActionConfiguration(BaseModel):
    configuration: Optional[ActionConfigurationMap] = None


class ActionDeclaration(BaseModel):
    actionTypeId: ActionTypeId
    configuration: Optional[ActionConfigurationMap] = None
    inputArtifacts: Optional[InputArtifactList] = None
    name: ActionName
    namespace: Optional[ActionNamespace] = None
    outputArtifacts: Optional[OutputArtifactList] = None
    region: Optional[AWSRegionName] = None
    roleArn: Optional[RoleArn] = None
    runOrder: Optional[ActionRunOrder] = None


class ActionExecution(BaseModel):
    actionExecutionId: Optional[ActionExecutionId] = None
    errorDetails: Optional[ErrorDetails] = None
    externalExecutionId: Optional[ExecutionId] = None
    externalExecutionUrl: Optional[Url] = None
    lastStatusChange: Optional[Timestamp] = None
    lastUpdatedBy: Optional[LastUpdatedBy] = None
    percentComplete: Optional[Percentage] = None
    status: Optional[ActionExecutionStatus] = None
    summary: Optional[ExecutionSummary] = None
    token: Optional[ActionExecutionToken] = None


class ActionExecutionInput(BaseModel):
    actionTypeId: Optional[ActionTypeId] = None
    configuration: Optional[ActionConfigurationMap] = None
    inputArtifacts: Optional[ArtifactDetailList] = None
    namespace: Optional[ActionNamespace] = None
    region: Optional[AWSRegionName] = None
    resolvedConfiguration: Optional[ResolvedActionConfigurationMap] = None
    roleArn: Optional[RoleArn] = None


class ActionExecutionOutput(BaseModel):
    executionResult: Optional[ActionExecutionResult] = None
    outputArtifacts: Optional[ArtifactDetailList] = None
    outputVariables: Optional[OutputVariablesMap] = None


class ActionState(BaseModel):
    actionName: Optional[ActionName] = None
    currentRevision: Optional[ActionRevision] = None
    entityUrl: Optional[Url] = None
    latestExecution: Optional[ActionExecution] = None
    revisionUrl: Optional[Url] = None


class ActionStateList(RootModel[List[ActionState]]):
    root: List[ActionState]


class ActionType(BaseModel):
    actionConfigurationProperties: Optional[ActionConfigurationPropertyList] = None
    id: ActionTypeId
    inputArtifactDetails: ArtifactDetails
    outputArtifactDetails: ArtifactDetails
    settings: Optional[ActionTypeSettings] = None


class ActionTypeList(RootModel[List[ActionType]]):
    root: List[ActionType]


class ActionTypeProperties(RootModel[List[ActionTypeProperty]]):
    root: List[ActionTypeProperty] = Field(..., max_length=10)


class ArtifactLocation(BaseModel):
    s3Location: Optional[S3ArtifactLocation] = None
    type: Optional[ArtifactLocationType] = None


class ArtifactStore(BaseModel):
    encryptionKey: Optional[EncryptionKey] = None
    location: ArtifactStoreLocation
    type: ArtifactStoreType


class ArtifactStoreMap(RootModel[Optional[Dict[str, ArtifactStore]]]):
    root: Optional[Dict[str, ArtifactStore]] = None


class CreateCustomActionTypeInput(BaseModel):
    category: ActionCategory
    configurationProperties: Optional[ActionConfigurationPropertyList] = None
    inputArtifactDetails: ArtifactDetails
    outputArtifactDetails: ArtifactDetails
    provider: ActionProvider
    settings: Optional[ActionTypeSettings] = None
    tags: Optional[TagList] = None
    version: Version


class CreateCustomActionTypeOutput(BaseModel):
    actionType: ActionType
    tags: Optional[TagList] = None


class GetPipelineExecutionOutput(BaseModel):
    pipelineExecution: Optional[PipelineExecution] = None


class JobWorkerExecutorConfiguration(BaseModel):
    pollingAccounts: Optional[PollingAccountList] = None
    pollingServicePrincipals: Optional[PollingServicePrincipalList] = None


class ListActionTypesOutput(BaseModel):
    actionTypes: ActionTypeList
    nextToken: Optional[NextToken] = None


class ListTagsForResourceOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    tags: Optional[TagList] = None


class ListWebhookItem(BaseModel):
    arn: Optional[WebhookArn] = None
    definition: WebhookDefinition
    errorCode: Optional[WebhookErrorCode] = None
    errorMessage: Optional[WebhookErrorMessage] = None
    lastTriggered: Optional[WebhookLastTriggered] = None
    tags: Optional[TagList] = None
    url: WebhookUrl


class PipelineContext(BaseModel):
    action: Optional[ActionContext] = None
    pipelineArn: Optional[PipelineArn] = None
    pipelineExecutionId: Optional[PipelineExecutionId] = None
    pipelineName: Optional[PipelineName] = None
    stage: Optional[StageContext] = None


class PipelineExecutionSummary(BaseModel):
    lastUpdateTime: Optional[Timestamp] = None
    pipelineExecutionId: Optional[PipelineExecutionId] = None
    sourceRevisions: Optional[SourceRevisionList] = None
    startTime: Optional[Timestamp] = None
    status: Optional[PipelineExecutionStatus] = None
    stopTrigger: Optional[StopExecutionTrigger] = None
    trigger: Optional[ExecutionTrigger] = None


class PipelineExecutionSummaryList(RootModel[List[PipelineExecutionSummary]]):
    root: List[PipelineExecutionSummary]


class PipelineList(RootModel[List[PipelineSummary]]):
    root: List[PipelineSummary]


class PutWebhookInput(BaseModel):
    tags: Optional[TagList] = None
    webhook: WebhookDefinition


class PutWebhookOutput(BaseModel):
    webhook: Optional[ListWebhookItem] = None


class StageActionDeclarationList(RootModel[List[ActionDeclaration]]):
    root: List[ActionDeclaration]


class StageDeclaration(BaseModel):
    actions: StageActionDeclarationList
    blockers: Optional[StageBlockerDeclarationList] = None
    name: StageName


class StageState(BaseModel):
    actionStates: Optional[ActionStateList] = None
    inboundExecution: Optional[StageExecution] = None
    inboundTransitionState: Optional[TransitionState] = None
    latestExecution: Optional[StageExecution] = None
    stageName: Optional[StageName] = None


class StageStateList(RootModel[List[StageState]]):
    root: List[StageState]


class WebhookList(RootModel[List[ListWebhookItem]]):
    root: List[ListWebhookItem]


class ActionExecutionDetail(BaseModel):
    actionExecutionId: Optional[ActionExecutionId] = None
    actionName: Optional[ActionName] = None
    input: Optional[ActionExecutionInput] = None
    lastUpdateTime: Optional[Timestamp] = None
    output: Optional[ActionExecutionOutput] = None
    pipelineExecutionId: Optional[PipelineExecutionId] = None
    pipelineVersion: Optional[PipelineVersion] = None
    stageName: Optional[StageName] = None
    startTime: Optional[Timestamp] = None
    status: Optional[ActionExecutionStatus] = None


class ActionExecutionDetailList(RootModel[List[ActionExecutionDetail]]):
    root: List[ActionExecutionDetail]


class Artifact(BaseModel):
    location: Optional[ArtifactLocation] = None
    name: Optional[ArtifactName] = None
    revision: Optional[Revision] = None


class ArtifactList(RootModel[List[Artifact]]):
    root: List[Artifact]


class ExecutorConfiguration(BaseModel):
    jobWorkerExecutorConfiguration: Optional[JobWorkerExecutorConfiguration] = None
    lambdaExecutorConfiguration: Optional[LambdaExecutorConfiguration] = None


class GetPipelineStateOutput(BaseModel):
    created: Optional[Timestamp] = None
    pipelineName: Optional[PipelineName] = None
    pipelineVersion: Optional[PipelineVersion] = None
    stageStates: Optional[StageStateList] = None
    updated: Optional[Timestamp] = None


class JobData(BaseModel):
    actionConfiguration: Optional[ActionConfiguration] = None
    actionTypeId: Optional[ActionTypeId] = None
    artifactCredentials: Optional[AWSSessionCredentials] = None
    continuationToken: Optional[ContinuationToken] = None
    encryptionKey: Optional[EncryptionKey] = None
    inputArtifacts: Optional[ArtifactList] = None
    outputArtifacts: Optional[ArtifactList] = None
    pipelineContext: Optional[PipelineContext] = None


class JobDetails(BaseModel):
    accountId: Optional[AccountId] = None
    data: Optional[JobData] = None
    id: Optional[JobId] = None


class ListActionExecutionsOutput(BaseModel):
    actionExecutionDetails: Optional[ActionExecutionDetailList] = None
    nextToken: Optional[NextToken] = None


class ListPipelineExecutionsOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    pipelineExecutionSummaries: Optional[PipelineExecutionSummaryList] = None


class ListPipelinesOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    pipelines: Optional[PipelineList] = None


class ListWebhooksOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    webhooks: Optional[WebhookList] = None


class PipelineStageDeclarationList(RootModel[List[StageDeclaration]]):
    root: List[StageDeclaration]


class ThirdPartyJobData(BaseModel):
    actionConfiguration: Optional[ActionConfiguration] = None
    actionTypeId: Optional[ActionTypeId] = None
    artifactCredentials: Optional[AWSSessionCredentials] = None
    continuationToken: Optional[ContinuationToken] = None
    encryptionKey: Optional[EncryptionKey] = None
    inputArtifacts: Optional[ArtifactList] = None
    outputArtifacts: Optional[ArtifactList] = None
    pipelineContext: Optional[PipelineContext] = None


class ThirdPartyJobDetails(BaseModel):
    data: Optional[ThirdPartyJobData] = None
    id: Optional[ThirdPartyJobId] = None
    nonce: Optional[Nonce] = None


class ActionTypeExecutor(BaseModel):
    configuration: ExecutorConfiguration
    jobTimeout: Optional[JobTimeout] = None
    policyStatementsTemplate: Optional[PolicyStatementsTemplate] = None
    type: ExecutorType


class GetJobDetailsOutput(BaseModel):
    jobDetails: Optional[JobDetails] = None


class GetThirdPartyJobDetailsOutput(BaseModel):
    jobDetails: Optional[ThirdPartyJobDetails] = None


class Job(BaseModel):
    accountId: Optional[AccountId] = None
    data: Optional[JobData] = None
    id: Optional[JobId] = None
    nonce: Optional[Nonce] = None


class JobList(RootModel[List[Job]]):
    root: List[Job]


class PipelineDeclaration(BaseModel):
    artifactStore: Optional[ArtifactStore] = None
    artifactStores: Optional[ArtifactStoreMap] = None
    name: PipelineName
    roleArn: RoleArn
    stages: PipelineStageDeclarationList
    version: Optional[PipelineVersion] = None


class PollForJobsOutput(BaseModel):
    jobs: Optional[JobList] = None


class UpdatePipelineInput(BaseModel):
    pipeline: PipelineDeclaration


class UpdatePipelineOutput(BaseModel):
    pipeline: Optional[PipelineDeclaration] = None


class ActionTypeDeclaration(BaseModel):
    description: Optional[ActionTypeDescription] = None
    executor: ActionTypeExecutor
    id: ActionTypeIdentifier
    inputArtifactDetails: ActionTypeArtifactDetails
    outputArtifactDetails: ActionTypeArtifactDetails
    permissions: Optional[ActionTypePermissions] = None
    properties: Optional[Any] = Field(
        None, description='The properties of the action type to be updated.'
    )
    urls: Optional[ActionTypeUrls] = None


class CreatePipelineInput(BaseModel):
    pipeline: PipelineDeclaration
    tags: Optional[TagList] = None


class CreatePipelineOutput(BaseModel):
    pipeline: Optional[PipelineDeclaration] = None
    tags: Optional[TagList] = None


class GetActionTypeOutput(BaseModel):
    actionType: Optional[ActionTypeDeclaration] = None


class GetPipelineOutput(BaseModel):
    metadata: Optional[PipelineMetadata] = None
    pipeline: Optional[PipelineDeclaration] = None


class UpdateActionTypeInput(BaseModel):
    actionType: ActionTypeDeclaration
